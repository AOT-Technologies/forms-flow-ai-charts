
---
keycloak:
  ## @section Keycloak statefulset parameters

  ## @param replicaCount Number of Keycloak replicas to deploy
  ##
  replicas: 1
  ## Keycloak authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
  ##
  auth:
    ## @param auth.adminUser Keycloak administrator user
    ##
    adminUser: admin
  ## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy=edge.
  ##
  production: true
  ## @param proxy reverse Proxy mode edge, reencrypt, passthrough or none
  ## DEPRECATED: use proxyHeaders instead
  ## ref: https://www.keycloak.org/server/reverseproxy
  ##
  proxy: edge
  ## HTTPS settings
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#tls-encryption
  ##
  tls:
    ## @param tls.enabled Enable TLS encryption. Required for HTTPs traffic.
    ##
    enabled: true
    ## @param tls.autoGenerated Generate automatically self-signed TLS certificates. Currently only supports PEM certificates
    ##    
    autoGenerated: true
  ## @param extraEnvVars Extra environment variables to be set on Keycloak container
  ## Example:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: 
    - name: KEYCLOAK_ADMIN_USER
      value: admin
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm" 
    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_ENABLE_HTTPS
      value: "false"
    - name: JAVA_OPTS
      value: >-
        -Dkeycloak.profile.feature.scripts=enabled
        -Dkeycloak.profile.feature.upload_scripts=enabled
        -Djava.net.preferIPv4Stack=true
  ## @param extraVolumes Optionally specify extra list of additional volumes for Keycloak pods
  ##
  extraVolumes: 
    - name: "forms-flow-idm-realm-config"
      configMap:
        name: "forms-flow-idm"
    - name: formsflow-themes
      emptyDir: {}
  ## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for Keycloak container(s)
  ##
  extraVolumeMounts: 
    - name: "forms-flow-idm-realm-config"
      mountPath: "/opt/bitnami/keycloak/data/import"
      readOnly: false
    - mountPath: /opt/bitnami/keycloak/themes
      name: formsflow-themes
      subPath: themes
  ## @param initContainers Add additional init containers to the Keycloak pods
  ## Example:
  ## initContainers:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  initContainers:
    - name: formsflow-themes
      image: formsflow/keycloak-customizations:v6.1.0-alpha
      imagePullPolicy: Always
      securityContext:
        runAsUser: 1001
      command: ["/bin/sh","-c"]
      args:
      - "mkdir -p /opt/bitnami/keycloak/themes && \
         cp -rf /custom/themes/* /opt/bitnami/keycloak/themes && \
         ls -ltra /opt/bitnami/keycloak/themes"
      volumeMounts:
      - mountPath: /opt/bitnami/keycloak
        name: formsflow-themes
  ## Bitnami Keycloak image version
  ## ref: https://hub.docker.com/r/bitnami/keycloak/tags/
  ## @param image.registry [default: REGISTRY_NAME] Keycloak image registry
  ## @param image.repository [default: REPOSITORY_NAME/keycloak] Keycloak image repository
  ## @skip image.tag Keycloak image tag (immutable tags are recommended)
  ## @param image.digest Keycloak image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy Keycloak image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ## @param image.debug Specify if debug logs should be enabled
  ##
  image:
    registry: "docker.io"
    repository: "bitnami/keycloak" 
    tag: 23.0.7
  ## PostgreSQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
  ## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  ## @param postgresql.auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
  ## @param postgresql.auth.username Name for a custom user to create
  ## @param postgresql.auth.password Password for the custom user to create
  ## @param postgresql.auth.database Name for a custom database to create
  ## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
  ## @param postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  ## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
  ## 
  postgresql:
    enabled: false
  ## External PostgreSQL configuration
  ## All of these values are only used when postgresql.enabled is set to false
  ## @param externalDatabase.host Database host
  ## @param externalDatabase.port Database port number
  ## @param externalDatabase.user Non-root username for Keycloak
  ## @param externalDatabase.password Password for the non-root username for Keycloak
  ## @param externalDatabase.database Keycloak database name
  ## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
  ## @param externalDatabase.existingSecretHostKey Name of an existing secret key containing the database host name
  ## @param externalDatabase.existingSecretPortKey Name of an existing secret key containing the database port
  ## @param externalDatabase.existingSecretUserKey Name of an existing secret key containing the database user
  ## @param externalDatabase.existingSecretDatabaseKey Name of an existing secret key containing the database name
  ## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
  ## @param externalDatabase.annotations Additional custom annotations for external database secret object
  ##  
  externalDatabase:
    host: "forms-flow-idm-postgresql-ha-pgpool"
    port: 5432
    user: postgres
    database: postgres
    password: "postgres"
  ## @param resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources:
    limits:
      cpu: 700m
      memory: 3Gi
    requests:
      cpu: 500m
      memory: 2Gi
  ## Keycloak containers' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param containerSecurityContext.enabled Enabled containers' Security Context
  ## @param containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param containerSecurityContext.privileged Set container's Security Context privileged
  ## @param containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: false
  ##
  ## Keycloak pods' SecurityContext
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param podSecurityContext.enabled Enabled Keycloak pods' Security Context
  ## @param podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param podSecurityContext.fsGroup Set Keycloak pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: false
  ## @section Exposure parameters
  ##

  ## Service configuration
  ##  
  service:
    type: ClusterIP
  ## Keycloak ingress parameters
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ingressClassName: ""
    annotations:
  #    kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-buffer-size: "300k"
    extraTls:
      - {}
    enabled: true
    hostname: #DEFINE_ME
    pathtype: Prefix
    servicePort: http
    tls: true
  ## @param httpRelativePath Set the path relative to '/' for serving resources. Useful if you are migrating from older version which were using '/auth/'
  ## ref: https://www.keycloak.org/migration/migrating-to-quarkus#_default_context_path_changed
  ##
  httpRelativePath: /auth/
  ## Keycloak cache configuration
  ## ref: https://www.keycloak.org/server/caching
  ## @param cache.enabled Switch to enable or disable the keycloak distributed cache for kubernetes.
  ## NOTE: Set to false to use 'local' cache (only supported when replicaCount=1).
  ## @param cache.stackName Set infinispan cache stack to use
  ## @param cache.stackFile Set infinispan cache stack filename to use
  ##
  cache:
    enabled: false

postgresql-ha:
  enabled: true
  ## @param fullnameOverride String to fully override common.names.fullname template
  ##
  fullnameOverride: "forms-flow-idm-postgresql"
  ## @section PostgreSQL with Repmgr parameters

  ## PostgreSQL parameters
  ##
  postgresql:
    ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
    ## @param postgresql.image.registry [default: REGISTRY_NAME] PostgreSQL with Repmgr image registry
    ## @param postgresql.image.repository [default: REPOSITORY_NAME/postgresql-repmgr] PostgreSQL with Repmgr image repository
    ## @skip postgresql.image.tag PostgreSQL with Repmgr image tag
    ## @param postgresql.image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param postgresql.image.pullPolicy PostgreSQL with Repmgr image pull policy
    ## @param postgresql.image.pullSecrets Specify docker-registry secret names as an array
    ## @param postgresql.image.debug Specify if debug logs should be enabled
    ##
    image:
      registry: docker.io
      repository: bitnami/postgresql-repmgr
      tag: 16.3.0-debian-12-r20
    ## @param postgresql.replicaCount Number of replicas to deploy. Use an odd number. Having 3 replicas is the minimum to get quorum when promoting a new primary.
    ##  
    replicaCount: 3
    ## @param postgresql.containerPorts.postgresql PostgreSQL port
    ##  
    containerPorts:
      postgresql: 5432
    ## K8s Security Context
    ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param postgresql.podSecurityContext.enabled Enable security context for PostgreSQL with Repmgr
    ## @param postgresql.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param postgresql.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param postgresql.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param postgresql.podSecurityContext.fsGroup Group ID for the PostgreSQL with Repmgr filesystem
    ##
    podSecurityContext:
      enabled: false
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## Container Security Context
    ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param postgresql.containerSecurityContext.enabled Enabled containers' Security Context
    ## @param postgresql.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param postgresql.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
    ## @param postgresql.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
    ## @param postgresql.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    ## @param postgresql.containerSecurityContext.privileged Set container's Security Context privileged
    ## @param postgresql.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param postgresql.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    ## @param postgresql.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param postgresql.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ## e.g:
    ##   containerSecurityContext:
    ##     enabled: true
    ##     capabilities:
    ##       drop: ["NET_RAW"]
    ##     readOnlyRootFilesystem: true
    ##  
    containerSecurityContext:
      enabled: false
      seLinuxOptions: null
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## PostgreSQL container's liveness probe
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param postgresql.livenessProbe.enabled Enable livenessProbe
    ## @param postgresql.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param postgresql.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param postgresql.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param postgresql.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param postgresql.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 6
    ## PostgreSQL container's readiness probe
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param postgresql.readinessProbe.enabled Enable readinessProbe
    ## @param postgresql.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param postgresql.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param postgresql.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param postgresql.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param postgresql.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: false
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 6
    ## PostgreSQL configuration parameters
    ## @param postgresql.username PostgreSQL username
    ## @param postgresql.password PostgreSQL password
    ## @param postgresql.database PostgreSQL database
    ##      
    username: postgres
    password: "postgres"
    database: "forms-flow-idm"
    ## @param postgresql.postgresPassword PostgreSQL password for the `postgres` user when `username` is not `postgres`
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-user-on-first-run (see note!)
    ##    
    postgresPassword: "changeme"
    ## @param postgresql.usePasswordFile Set to `true` to mount PostgreSQL secret as a file instead of passing environment variable
    ##
    usePasswordFile: "false"
    ## Repmgr configuration parameters
    ## @param postgresql.repmgrUsername PostgreSQL Repmgr username
    ## @param postgresql.repmgrPassword PostgreSQL Repmgr password
    ## @param postgresql.repmgrDatabase PostgreSQL Repmgr database
    ## @param postgresql.repmgrLogLevel Repmgr log level (DEBUG, INFO, NOTICE, WARNING, ERROR, ALERT, CRIT or EMERG)
    ## @param postgresql.repmgrConnectTimeout Repmgr backend connection timeout (in seconds)
    ## @param postgresql.repmgrReconnectAttempts Repmgr backend reconnection attempts
    ## @param postgresql.repmgrReconnectInterval Repmgr backend reconnection interval (in seconds)
    ## @param postgresql.repmgrFenceOldPrimary Set if fencing of old primary in multiple primary situation is desired
    ## @param postgresql.repmgrChildNodesCheckInterval Repmgr child nodes check interval (in seconds)
    ## @param postgresql.repmgrChildNodesConnectedMinCount Repmgr minimum number of connected child nodes before being considered as failed primary for fencing
    ## @param postgresql.repmgrChildNodesDisconnectTimeout Repmgr time before node will be fenced when insufficient child nodes are detected (in seconds)
    ##    
    repmgrUsername: repmgr
    repmgrPassword: "changeme"
    repmgrDatabase: repmgr
    repmgrLogLevel: NOTICE
    repmgrConnectTimeout: 5
    repmgrReconnectAttempts: 2
    repmgrReconnectInterval: 3
    repmgrFenceOldPrimary: false
    repmgrChildNodesCheckInterval: 5
    repmgrChildNodesConnectedMinCount: 1
    repmgrChildNodesDisconnectTimeout: 30
    ## @param postgresql.initdbScripts Dictionary of initdb scripts
    ## Specify dictionary of scripts to be run at first boot
    ## The allowed extensions are `.sh`, `.sql` and `.sql.gz`
    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#initialize-a-fresh-instance
    ## e.g:
    ## initdbScripts:
    ##   my_init_script.sh: |
    ##      #!/bin/sh
    ##      echo "Do something."
    ##
    initdbScripts:
      init_script.sql: |
         GRANT pg_read_all_data TO postgres;
         GRANT pg_write_all_data TO postgres;
         GRANT USAGE ON SCHEMA public TO postgres;
         GRANT CONNECT ON DATABASE "forms-flow-idm" to postgres;
         GRANT ALL PRIVILEGES ON DATABASE "forms-flow-idm" to postgres;
         GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;   

         GRANT pg_read_all_data TO repmgr;
         GRANT pg_write_all_data TO repmgr;
         GRANT USAGE ON SCHEMA public TO repmgr;
         GRANT CONNECT ON DATABASE "forms-flow-idm" to repmgr;
         GRANT ALL PRIVILEGES ON DATABASE "forms-flow-idm" to repmgr;
         GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO repmgr;

         alter database "forms-flow-idm" set default_transaction_read_only = off;
  ## @section Pgpool parameters

  ## Pgpool parameters
  ##
  pgpool:
    ## Bitnami Pgpool image
    ## ref: https://hub.docker.com/r/bitnami/pgpool/tags/
    ## @param pgpool.image.registry [default: REGISTRY_NAME] Pgpool image registry
    ## @param pgpool.image.repository [default: REPOSITORY_NAME/pgpool] Pgpool image repository
    ## @skip pgpool.image.tag Pgpool image tag
    ## @param pgpool.image.digest Pgpool image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param pgpool.image.pullPolicy Pgpool image pull policy
    ## @param pgpool.image.pullSecrets Specify docker-registry secret names as an array
    ## @param pgpool.image.debug Specify if debug logs should be enabled
    ##
    image:
      registry: docker.io
      repository: bitnami/pgpool
      tag: 4.5.2-debian-12-r5
      digest: ""
      ## Specify a imagePullPolicy. Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
      ##
      pullPolicy: IfNotPresent
    ## @param pgpool.replicaCount The number of replicas to deploy
    ##
    replicaCount: 1
    ## K8s Security Context
    ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param pgpool.podSecurityContext.enabled Enable security context for Pgpool
    ## @param pgpool.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param pgpool.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param pgpool.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param pgpool.podSecurityContext.fsGroup Group ID for the Pgpool filesystem
    ##    
    podSecurityContext:
      enabled: false
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## Container Security Context
    ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param pgpool.containerSecurityContext.enabled Enabled containers' Security Context
    ## @param pgpool.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param pgpool.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
    ## @param pgpool.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
    ## @param pgpool.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    ## @param pgpool.containerSecurityContext.privileged Set container's Security Context privileged
    ## @param pgpool.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param pgpool.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    ## @param pgpool.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param pgpool.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ## e.g:
    ##   containerSecurityContext:
    ##     enabled: true
    ##     capabilities:
    ##       drop: ["NET_RAW"]
    ##     readOnlyRootFilesystem: false
    ##
    containerSecurityContext:
      enabled: false
      seLinuxOptions: null
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## Pgpool container's liveness probe
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param pgpool.livenessProbe.enabled Enable livenessProbe
    ## @param pgpool.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param pgpool.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param pgpool.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param pgpool.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param pgpool.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## Pgpool container's readiness probe
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ## @param pgpool.readinessProbe.enabled Enable readinessProbe
    ## @param pgpool.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param pgpool.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param pgpool.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param pgpool.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param pgpool.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: false
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5  
    ## @param pgpool.containerPorts.postgresql Pgpool port
    ##
    containerPorts:
      postgresql: 5432
    ## Credentials for the pgpool administrator
    ## @param pgpool.adminUsername Pgpool Admin username
    ## @param pgpool.adminPassword Pgpool Admin password
    ##
    adminUsername: admin
    adminPassword: "changeme"
  ## @section Persistence parameters

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable data persistence
    ##
    enabled: true
    ## @param persistence.storageClass Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ## set, choosing the default provisioner.
    ##  
    storageClass: ""
    ## @param persistence.mountPath The path the volume will be mounted at, useful when using different PostgreSQL images.
    ##  
    mountPath: /bitnami/postgresql
    ## @param persistence.accessModes List of access modes of data volume
    ##  
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  ## @section Traffic Exposure parameters

  ## PostgreSQL service parameters
  ##
  service:
    ## @param service.type Kubernetes service type (`ClusterIP`, `NodePort` or `LoadBalancer`)
    ##
    type: ClusterIP
    ## @param service.ports.postgresql PostgreSQL port
    ##
    ports:
      postgresql: 5432
    ## @param service.portName PostgreSQL service port name
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services
    ##    
    portName: postgresql
    ## @param service.nodePorts.postgresql Kubernetes service nodePort
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##  
    nodePorts:
      postgresql: ""
