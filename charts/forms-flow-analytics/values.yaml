Domain: localhost
database:
  username: postgres
  password: postgres
  servicename: forms-flow-ai-postgresql-ha-pgpool-service
  port: 5432
  url: 'postgresql://{{.Values.database.username}}:{{.Values.database.password}}@{{.Values.database.servicename}}:{{.Values.database.port}}/{{.Chart.Name}}'

ingress:
  ingressClassName: ''
  annotations:
  enabled: true # create an ingress for this component
  hostname: '{{.Chart.Name}}-{{.Release.Namespace}}.{{tpl .Values.Domain .}}'
  port: 5000
  tls: true
  selfSigned: false
  extraTls:
    - {}
redis-exporter:
  exporter:
    image:
      registry: docker.io
      repository: oliver006/redis_exporter
      tag: v1.14.0-alpine
  redis:
    image:
      registry: docker.io
      repository: redis
      tag: 7.0-rc3-alpine
      #  persistentVolumeClaim:
      #    size: 2Gi
      #     storageClass: ""
  resources:
    limits:
      cpu: 60m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 256Mi
redash:
  multiorg: 'false'
  image:
    registry: docker.io #registry to use
    repository: formsflow/redash # repoisitory for redash image
    tag: 24.04.0 # tag of image being used
    pullPolicy: Always
  database:
    password: '{{ .Values.database.password }}'
    url: 'postgresql://{{ .Values.database.username }}:{{ .Values.database.password }}@{{ .Values.database.servicename }}:5432/postgres'
resources:
  limits:
    cpu: 200m
    memory: 2Gi
  requests:
    cpu: 180m
    memory: 1Gi

# imagePullSecrets -- Name(s) of secrets to use if pulling images from a private registry
imagePullSecrets: []
# nameOverride - Override the autogenerated release name based chart name
nameOverride: ''
fullnameOverride: ''

# env -- Redash global environment variables - applied to both server and worker containers.
env:
  PYTHONUNBUFFERED: 0
  REDASH_PRODUCTION: 'true'

# initContainers -- Redash global init containers
initContainers: []

# volumes -- Redash global volumes configuration - applied to all containers
volumes: []

# volumeMounts -- Redash global volume mounts configuration - applied to all containers
volumeMounts: []

## Service account and security context configuration
serviceAccount:
  # serviceAccount.create -- Specifies whether a service account should be created
  create: true
  # serviceAccount.annotations -- Annotations to add to the service account
  annotations: {}
  # serviceAccount.name -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

## Configuration for Redash workers
workers:
  adhoc:
    # workers.adhoc.env -- Redash ad-hoc worker specific environment variables.
    env:
      QUEUES: queries
      WORKERS_COUNT: 2
  scheduled:
    # workers.scheduled.env -- Redash scheduled worker specific environment variables.
    env:
      QUEUES: scheduled_queries,schemas
      WORKERS_COUNT: 1
  generic:
    # workers.generic.env -- Redash generic worker specific environment variables.
    env:
      QUEUES: periodic,emails,default
      WORKERS_COUNT: 1

## Common worker configuration, which can be overidden for each worker at workers.<workerName>
worker:
  # worker.replicaCount -- Default number of worker pods to run
  replicaCount: 1

  # worker.initContainers -- Worker default init containers configuration
  initContainers: []

  # worker.resources -- Worker default resource requests and limits [ref](http://kubernetes.io/docs/user-guide/compute-resources/)
  resources:
    # limits:
    #   cpu: 500m
    #   memory: 3Gi
    # requests:
    #   cpu: 100m
    #  memory: 500Mi
    limits:
      cpu: 200m
      memory: 2Gi
    requests:
      cpu: 180m
      memory: 1Gi

  # worker.podSecurityContext -- Default worker's security context pod assignment [ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
  podSecurityContext: {}
  securityContext: {}

  # worker.nodeSelector -- Default node labels for worker pod assignment [ref](https://kubernetes.io/docs/user-guide/node-selection/)
  nodeSelector: {}

  # worker.tolerations -- Default tolerations for worker pod assignment [ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
  tolerations: []

  # worker.affinity -- Default affinity for worker pod assignment [ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity)
  affinity: {}

  # worker.podAnnotations -- Default annotations for worker pod assignment [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
  podAnnotations: {}

  # worker.podLabels -- Default labels for worker pod assignment [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
  podLabels: {}

  # worker.volumes -- Default volumes for pod worker assignment [ref](https://kubernetes.io/docs/concepts/storage/volumes/)
  volumes: []

  # worker.volumeMounts -- Default VolumeMounts for worker pod assignment [ref](https://kubernetes.io/docs/concepts/storage/volumes/)
  volumeMounts: []

  # worker.livenessProbe -- Default worker's liveness probe to ensure workers are running fine
  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - /app/bin/docker-entrypoint workers_healthcheck
    timeoutSeconds: 10
    initialDelaySeconds: 60
    periodSeconds: 100
