Domain: #<DEFINE_ME>

database:
  username: postgres 
  password: postgres
  servicename: forms-flow-ai-postgresql-ha-pgpool
  port: 5432
  url: "postgresql://{{.Values.database.username}}:{{.Values.database.password}}@{{.Values.database.servicename}}:{{.Values.database.port}}/{{.Chart.Name}}"
externalDatabase:
  existingDatabaseUrlKey: "" 
  existingSecretName: "" #name of the existing secret

formsflow:
  configmap: forms-flow-ai # name of formsflow.ai configmap
  # secret: forms-flow-ai #name of formsflow.ai secret
  auth: forms-flow-ai-auth


ingress:
  ingressClassName: ''
  annotations: {}
  enabled: true # create an ingress for this component
  hostname: '{{ .Chart.Name }}-{{ .Release.Namespace }}.{{ .Values.Domain }}'
  port: 5000
  tls: true
  selfSigned: false
  extraTls:
    - {}

redis-exporter:
  exporter:
    image:
      registry: docker.io
      repository: oliver006/redis_exporter
      tag: v1.14.0-alpine
  redis:
    image:
      registry: docker.io
      repository: redis
      tag: 7.0-rc3-alpine
      #  persistentVolumeClaim:
      #    size: 2Gi
      #     storageClass: ""
  resources:
    limits:
      cpu: 60m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 256Mi

redash:
  multiorg: 'false'
  image:
    registry: docker.io #registry to use
    repository: formsflow/redash # repoisitory for redash image
    tag: 24.04.0 # tag of image being used
    pullPolicy: Always
  database:
    password: '{{ .Values.database.password }}'
    url: 'postgresql://{{ .Values.database.username }}:{{ .Values.database.password }}@{{ .Values.database.servicename }}:5432/postgres'
resources:
  limits:
    cpu: "2000m"
    memory: "2048Mi"
  requests:
    cpu: "1000m"
    memory: "1024Mi"

workers:
  adhoc:
    env:
      QUEUES: queries
      WORKERS_COUNT: 2
  scheduled:
    env:
      QUEUES: scheduled_queries,schemas
      WORKERS_COUNT: 1
  generic:
    env:
      QUEUES: periodic,emails,default
      WORKERS_COUNT: 1

worker:
  replicaCount: 1
  initContainers: []
  resources:
    limits:
      cpu: 200m
      memory: 2Gi
    requests:
      cpu: 180m
      memory: 1Gi
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  volumes: []
  volumeMounts: []
  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - /app/bin/docker-entrypoint workers_healthcheck
    timeoutSeconds: 10
    initialDelaySeconds: 60
    periodSeconds: 100