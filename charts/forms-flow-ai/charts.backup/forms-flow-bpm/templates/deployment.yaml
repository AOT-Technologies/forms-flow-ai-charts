apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: "{{ .Chart.Name }}"
  name: "{{ .Chart.Name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Chart.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "{{ .Chart.Name }}"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - "{{ .Chart.Name }}"
            topologyKey: kubernetes.io/hostname
      containers:
      - envFrom:
        - configMapRef:
            name: "{{ .Chart.Name }}" # bpm environment variables 
        - secretRef:
            name: "{{ .Chart.Name }}" # bpm environment variables 
        - configMapRef:
            name: "{{ .Values.formsflow.configmap }}" # bpm environment variables 
        - secretRef:
            name: "{{ .Values.formsflow.secret }}" # integration environment secrets 
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /camunda/actuator/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 3
        name: "{{ .Chart.Name }}"
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /camunda/actuator/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: "{{ .Values.resources.limits.cpu }}"
            memory: "{{ .Values.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.resources.requests.cpu }}"
            memory: "{{ .Values.resources.requests.memory }}"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/mail-config.properties
          name: "{{ .Chart.Name }}-mail-config"
          subPath: mail-config.properties
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: mail-config.properties
            path: mail-config.properties
          name: "{{ .Chart.Name }}-mail-config"
        name: "{{ .Chart.Name }}-mail-config"
